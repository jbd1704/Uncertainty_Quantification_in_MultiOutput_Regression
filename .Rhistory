usethis::use_agpl3_license()
usethis::use_agpl3_license()
usethis::use_r("data_generation")
usethis::use_r("model_training_GB")
usethis::use_r("uncertainty.R")
devtools::load_all(".")
usethis::use_rcpp()
usethis::use_package_doc()
devtools::load_all(".")
.Last.error
devtools::load_all(".")
.Last.error
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
usethis::use_testthat(3)
usethis::use_test("code")
# Load dataset
df <- fread("data/dataset.csv")
# Load dataset
df <- read("data/dataset.csv")
library(Algorithmique)
library(xgboost)
library(data.table)
# Load dataset
df <- fread("data/dataset.csv")
X <- df[, .(X1, X2)]
Y <- df[, !c("X1", "X2"), with = FALSE]
print("the dimension of X is:")
print(dim(X))
print("the dimension of Y is:")
print(dim(Y))
# Define split parameters
n_train <- 1000
n_test <- 1000
n_calib <- 2000
# Perform data split
splits <- train_test_calib_split(X, Y, n_train = n_train, n_test = n_test, n_calib = n_calib)
# Extract split datasets
X_train <- splits$X_train
y_train <- splits$y_train
X_calib <- splits$X_calib
y_calib <- splits$y_calib
X_test <- splits$X_test
y_test <- splits$y_test
idx_calib <- splits$idx_calib
idx_test <- splits$idx_test
# Building our model
model <- MLModel$new(X_train, y_train, method = "gradient_boosting")
library(Algorithmique)
# Building our model
model <- MLModel$new(X_train, y_train, method = "gradient_boosting")
library(xgboost)
library(data.table)
# Load dataset
df <- fread("data/dataset.csv")
X <- df[, .(X1, X2)]
Y <- df[, !c("X1", "X2"), with = FALSE]
print("the dimension of X is:")
print(dim(X))
print("the dimension of Y is:")
print(dim(Y))
# Define split parameters
n_train <- 1000
n_test <- 1000
n_calib <- 2000
# Perform data split
splits <- train_test_calib_split(X, Y, n_train = n_train, n_test = n_test, n_calib = n_calib)
# Extract split datasets
X_train <- splits$X_train
y_train <- splits$y_train
X_calib <- splits$X_calib
y_calib <- splits$y_calib
X_test <- splits$X_test
y_test <- splits$y_test
idx_calib <- splits$idx_calib
idx_test <- splits$idx_test
# Building our model
model <- MLModel$new(X_train, y_train, method = "gradient_boosting")
# Building our model
model <- MLModel$new(X_train, y_train, method = "gradient_boosting")
library(Algorithmique)
library(xgboost)
library(data.table)
# Load dataset
df <- fread("data/dataset.csv")
X <- df[, .(X1, X2)]
Y <- df[, !c("X1", "X2"), with = FALSE]
print("the dimension of X is:")
print(dim(X))
print("the dimension of Y is:")
print(dim(Y))
# Define split parameters
n_train <- 1000
n_test <- 1000
n_calib <- 2000
# Perform data split
splits <- train_test_calib_split(X, Y, n_train = n_train, n_test = n_test, n_calib = n_calib)
# Extract split datasets
X_train <- splits$X_train
y_train <- splits$y_train
X_calib <- splits$X_calib
y_calib <- splits$y_calib
X_test <- splits$X_test
y_test <- splits$y_test
idx_calib <- splits$idx_calib
idx_test <- splits$idx_test
# Building our model
model <- MLModel$new(X_train, y_train, method = "gradient_boosting")
model$fit()
# Building our model
model <- MLReduceModel$new(X_train, y_train, method = "gradient_boosting")
# Building our model
model <- MLReducedModel$new(X_train, y_train, method = "gradient_boosting")
library(R6)
# Building our model
model <- MLModel$new(X_train, y_train, method = "gradient_boosting")
library(Algorithmique)
library(xgboost)
library(data.table)
library(R6)
# Building our model
model <- MLModel$new(X_train, y_train, method = "gradient_boosting")
library(data.table)
dataset <- fread("data/dataset.csv")  # or wherever your file is
usethis::use_data(dataset, overwrite = TRUE)
data(dataset)
head(dataset)
devtools::document()
devtools::load_all()
rm(list = c("column_wise_rank", "dichotomie", "get_Beta_quantiles", "get_prediction_bounds",
"get_r_max_scalar", "get_sorted_scores", "R_max_vector", "simultaneous_coverage"))
ls()
rm(list = c("absolute_residual_scores", "column_wise_rank", "dichotomie",
"get_Beta_quantiles", "get_prediction_bounds",
"get_r_max_scalar", "get_sorted_scores",
"R_max_vector", "simultaneous_coverage",
"simultaneous_coverage_bis"))
# Load necessary libraries
library(Algorithmique)
library(xgboost)
library(data.table)
library(R6)
# Load dataset
setwd("../")
df <- fread("data/dataset.csv")
X <- df[, .(X1, X2)]
Y <- df[, !c("X1", "X2"), with = FALSE]
# Print dimensions of X and Y
print("The dimension of X is:")
print(dim(X))
print("The dimension of Y is:")
print(dim(Y))
