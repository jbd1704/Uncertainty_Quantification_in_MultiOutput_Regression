// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// absolute_residual_scores_cpp
NumericMatrix absolute_residual_scores_cpp(NumericMatrix y_pred, NumericMatrix y_true);
RcppExport SEXP _Algorithmique_absolute_residual_scores_cpp(SEXP y_predSEXP, SEXP y_trueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y_pred(y_predSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y_true(y_trueSEXP);
    rcpp_result_gen = Rcpp::wrap(absolute_residual_scores_cpp(y_pred, y_true));
    return rcpp_result_gen;
END_RCPP
}
// simultaneous_coverage_cpp
double simultaneous_coverage_cpp(NumericMatrix y_true, NumericMatrix y_lower, NumericMatrix y_upper);
RcppExport SEXP _Algorithmique_simultaneous_coverage_cpp(SEXP y_trueSEXP, SEXP y_lowerSEXP, SEXP y_upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y_true(y_trueSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y_lower(y_lowerSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y_upper(y_upperSEXP);
    rcpp_result_gen = Rcpp::wrap(simultaneous_coverage_cpp(y_true, y_lower, y_upper));
    return rcpp_result_gen;
END_RCPP
}
// get_sorted_scores_cpp
NumericMatrix get_sorted_scores_cpp(NumericMatrix Scores);
RcppExport SEXP _Algorithmique_get_sorted_scores_cpp(SEXP ScoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Scores(ScoresSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sorted_scores_cpp(Scores));
    return rcpp_result_gen;
END_RCPP
}
// get_Beta_quantiles_cpp
NumericVector get_Beta_quantiles_cpp(NumericMatrix sorted_Scores, double Beta);
RcppExport SEXP _Algorithmique_get_Beta_quantiles_cpp(SEXP sorted_ScoresSEXP, SEXP BetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sorted_Scores(sorted_ScoresSEXP);
    Rcpp::traits::input_parameter< double >::type Beta(BetaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Beta_quantiles_cpp(sorted_Scores, Beta));
    return rcpp_result_gen;
END_RCPP
}
// get_prediction_bounds_cpp
List get_prediction_bounds_cpp(NumericVector quantile, NumericMatrix y_pred);
RcppExport SEXP _Algorithmique_get_prediction_bounds_cpp(SEXP quantileSEXP, SEXP y_predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y_pred(y_predSEXP);
    rcpp_result_gen = Rcpp::wrap(get_prediction_bounds_cpp(quantile, y_pred));
    return rcpp_result_gen;
END_RCPP
}
// column_wise_rank_cpp
NumericMatrix column_wise_rank_cpp(NumericMatrix mat);
RcppExport SEXP _Algorithmique_column_wise_rank_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(column_wise_rank_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// R_max_vector_cpp
NumericVector R_max_vector_cpp(NumericMatrix rank_matrix);
RcppExport SEXP _Algorithmique_R_max_vector_cpp(SEXP rank_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rank_matrix(rank_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(R_max_vector_cpp(rank_matrix));
    return rcpp_result_gen;
END_RCPP
}
// get_r_max_scalar_cpp
int get_r_max_scalar_cpp(NumericVector R_max, double alpha);
RcppExport SEXP _Algorithmique_get_r_max_scalar_cpp(SEXP R_maxSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type R_max(R_maxSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_r_max_scalar_cpp(R_max, alpha));
    return rcpp_result_gen;
END_RCPP
}
// max_rank_quantiles_cpp
NumericVector max_rank_quantiles_cpp(int r_max, NumericMatrix sorted_score_matrix);
RcppExport SEXP _Algorithmique_max_rank_quantiles_cpp(SEXP r_maxSEXP, SEXP sorted_score_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r_max(r_maxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sorted_score_matrix(sorted_score_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(max_rank_quantiles_cpp(r_max, sorted_score_matrix));
    return rcpp_result_gen;
END_RCPP
}
// dichotomie_wrapper_cpp
double dichotomie_wrapper_cpp(double target, double xmin, double xmax, int n_iter, NumericVector R_max);
RcppExport SEXP _Algorithmique_dichotomie_wrapper_cpp(SEXP targetSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP n_iterSEXP, SEXP R_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_max(R_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(dichotomie_wrapper_cpp(target, xmin, xmax, n_iter, R_max));
    return rcpp_result_gen;
END_RCPP
}
// simultaneous_coverage_bis_wrapper_cpp
double simultaneous_coverage_bis_wrapper_cpp(NumericVector R_max, double Beta);
RcppExport SEXP _Algorithmique_simultaneous_coverage_bis_wrapper_cpp(SEXP R_maxSEXP, SEXP BetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type R_max(R_maxSEXP);
    Rcpp::traits::input_parameter< double >::type Beta(BetaSEXP);
    rcpp_result_gen = Rcpp::wrap(simultaneous_coverage_bis_wrapper_cpp(R_max, Beta));
    return rcpp_result_gen;
END_RCPP
}
// fit_cpp
List fit_cpp(NumericMatrix y_pred_calib, NumericMatrix Y_calibration, std::string uncertainty_method, double Global_alpha);
RcppExport SEXP _Algorithmique_fit_cpp(SEXP y_pred_calibSEXP, SEXP Y_calibrationSEXP, SEXP uncertainty_methodSEXP, SEXP Global_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y_pred_calib(y_pred_calibSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_calibration(Y_calibrationSEXP);
    Rcpp::traits::input_parameter< std::string >::type uncertainty_method(uncertainty_methodSEXP);
    Rcpp::traits::input_parameter< double >::type Global_alpha(Global_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_cpp(y_pred_calib, Y_calibration, uncertainty_method, Global_alpha));
    return rcpp_result_gen;
END_RCPP
}
// predict_cpp
List predict_cpp(NumericMatrix y_pred_test, NumericVector quantiles);
RcppExport SEXP _Algorithmique_predict_cpp(SEXP y_pred_testSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type y_pred_test(y_pred_testSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_cpp(y_pred_test, quantiles));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Algorithmique_absolute_residual_scores_cpp", (DL_FUNC) &_Algorithmique_absolute_residual_scores_cpp, 2},
    {"_Algorithmique_simultaneous_coverage_cpp", (DL_FUNC) &_Algorithmique_simultaneous_coverage_cpp, 3},
    {"_Algorithmique_get_sorted_scores_cpp", (DL_FUNC) &_Algorithmique_get_sorted_scores_cpp, 1},
    {"_Algorithmique_get_Beta_quantiles_cpp", (DL_FUNC) &_Algorithmique_get_Beta_quantiles_cpp, 2},
    {"_Algorithmique_get_prediction_bounds_cpp", (DL_FUNC) &_Algorithmique_get_prediction_bounds_cpp, 2},
    {"_Algorithmique_column_wise_rank_cpp", (DL_FUNC) &_Algorithmique_column_wise_rank_cpp, 1},
    {"_Algorithmique_R_max_vector_cpp", (DL_FUNC) &_Algorithmique_R_max_vector_cpp, 1},
    {"_Algorithmique_get_r_max_scalar_cpp", (DL_FUNC) &_Algorithmique_get_r_max_scalar_cpp, 2},
    {"_Algorithmique_max_rank_quantiles_cpp", (DL_FUNC) &_Algorithmique_max_rank_quantiles_cpp, 2},
    {"_Algorithmique_dichotomie_wrapper_cpp", (DL_FUNC) &_Algorithmique_dichotomie_wrapper_cpp, 5},
    {"_Algorithmique_simultaneous_coverage_bis_wrapper_cpp", (DL_FUNC) &_Algorithmique_simultaneous_coverage_bis_wrapper_cpp, 2},
    {"_Algorithmique_fit_cpp", (DL_FUNC) &_Algorithmique_fit_cpp, 4},
    {"_Algorithmique_predict_cpp", (DL_FUNC) &_Algorithmique_predict_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Algorithmique(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
